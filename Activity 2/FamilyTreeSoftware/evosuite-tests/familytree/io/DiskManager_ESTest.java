/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 14 14:06:26 EDT 2018
 */

package familytree.io;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import familytree.model.Person;
import familytree.view.PersonTableModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = false, useJEE = true) 
public class DiskManager_ESTest extends DiskManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DiskManager diskManager0 = DiskManager.getDiskManager();
          PersonTableModel personTableModel0 = new PersonTableModel();
          // Undeclared exception!
          try { 
            diskManager0.writeToDisk(personTableModel0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"FamilyTreePersons.fml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:200)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:101)
             // java.io.FileWriter.<init>(FileWriter.java:63)
             // familytree.io.DiskManager.writeToDisk(DiskManager.java:118)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiskManager diskManager0 = DiskManager.getDiskManager();
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.addPerson((Person) null);
      // Undeclared exception!
      try { 
        diskManager0.readFromDisk(personTableModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiskManager diskManager0 = DiskManager.getDiskManager();
      PersonTableModel personTableModel0 = new PersonTableModel();
      diskManager0.readFromDisk(personTableModel0);
      try { 
        diskManager0.readFromDisk(personTableModel0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AddRelation failed when reading file.
         //  The file is likely corrupt
         //
         verifyException("familytree.io.DiskManager", e);
      }
  }
}
